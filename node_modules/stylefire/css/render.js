"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var transform_props_1 = require("./transform-props");
var prefixer_1 = require("./prefixer");
var value_types_1 = require("./value-types");
exports.aliasMap = {
    x: 'translateX',
    y: 'translateY',
    z: 'translateZ',
    originX: 'transformOriginX',
    originY: 'transformOriginY',
    originZ: 'transformOriginZ'
};
var NUMBER = 'number';
var OBJECT = 'object';
var COLON = ':';
var SEMI_COLON = ';';
var TRANSFORM_ORIGIN = 'transform-origin';
var TRANSFORM = 'transform';
var TRANSLATE_Z = 'translateZ';
var TRANSFORM_NONE = ';transform: none';
var styleRule = function (key, value) { return "" + SEMI_COLON + key + COLON + value; };
function buildStylePropertyString(state, changedValues, enableHardwareAcceleration) {
    if (changedValues === void 0) { changedValues = true; }
    if (enableHardwareAcceleration === void 0) { enableHardwareAcceleration = true; }
    var valuesToChange = (changedValues === true) ? Object.keys(state) : changedValues;
    var propertyString = '';
    var transformString = '';
    var hasTransformOrigin = false;
    var transformIsDefault = true;
    var hasTransform = false;
    var transformHasZ = false;
    var numChangedValues = valuesToChange.length;
    for (var i = 0; i < numChangedValues; i++) {
        var key = valuesToChange[i];
        if (transform_props_1.isTransformProp(key)) {
            hasTransform = true;
            for (var stateKey in state) {
                if (transform_props_1.isTransformProp(stateKey) && valuesToChange.indexOf(stateKey) === -1) {
                    valuesToChange.push(stateKey);
                }
            }
            break;
        }
    }
    valuesToChange.sort(transform_props_1.sortTransformProps);
    var totalNumChangedValues = valuesToChange.length;
    for (var i = 0; i < totalNumChangedValues; i++) {
        var key = valuesToChange[i];
        var isTransformKey = transform_props_1.isTransformProp(key);
        var value = state[key];
        var valueType = value_types_1.default(key);
        if (isTransformKey) {
            if ((valueType.default && value !== valueType.default) || (!valueType.default && value !== 0)) {
                transformIsDefault = false;
            }
        }
        if (valueType && (typeof value === NUMBER || typeof value === OBJECT) && valueType.transform) {
            value = valueType.transform(value);
        }
        if (isTransformKey) {
            transformString += key + '(' + value + ') ';
            transformHasZ = (key === TRANSLATE_Z) ? true : transformHasZ;
        }
        else if (transform_props_1.isTransformOriginProp(key)) {
            state[key] = value;
            hasTransformOrigin = true;
        }
        else {
            propertyString += styleRule(prefixer_1.default(key, true), value);
        }
    }
    if (hasTransformOrigin) {
        propertyString += styleRule(TRANSFORM_ORIGIN, (state.transformOriginX || 0) + " " + (state.transformOriginY || 0) + " " + (state.transformOriginZ || 0));
    }
    if (hasTransform) {
        if (!transformHasZ && enableHardwareAcceleration) {
            transformString += TRANSLATE_Z + "(0)";
        }
        propertyString += styleRule(TRANSFORM, transformIsDefault ? TRANSFORM_NONE : transformString);
    }
    return propertyString;
}
exports.default = buildStylePropertyString;
//# sourceMappingURL=render.js.map